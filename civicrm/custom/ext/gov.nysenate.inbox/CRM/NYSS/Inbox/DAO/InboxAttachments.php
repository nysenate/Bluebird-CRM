<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from gov.nysenate.inbox/xml/schema/CRM/NYSS/Inbox/InboxAttachments.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:f6a7a8cac0f665d3571338ea1d467cc5)
 */
use CRM_NYSS_Inbox_ExtensionUtil as E;

/**
 * Database access object for the InboxAttachments entity.
 */
class CRM_NYSS_Inbox_DAO_InboxAttachments extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'nyss_inbox_attachments';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique InboxAttachments ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to InboxMessages
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $email_id;

  /**
   * File name
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $file_name;

  /**
   * Full path to file
   *
   * @var string|null
   *   (SQL type: varchar(512))
   *   Note that values will be retrieved from the database as a string.
   */
  public $file_full;

  /**
   * Details if attachment cannot be processed.
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $rejection;

  /**
   * @var string|null
   *   (SQL type: varchar(128))
   *   Note that values will be retrieved from the database as a string.
   */
  public $mime_type;

  /**
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $size;

  /**
   * @var string|null
   *   (SQL type: varchar(10))
   *   Note that values will be retrieved from the database as a string.
   */
  public $ext;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'nyss_inbox_attachments';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Inbox Attachmentses') : E::ts('Inbox Attachments');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'email_id', 'nyss_inbox_messages', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique InboxAttachments ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.id',
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'email_id' => [
          'name' => 'email_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Email ID'),
          'description' => E::ts('FK to InboxMessages'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.email_id',
          'default' => NULL,
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'FKClassName' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'add' => NULL,
        ],
        'file_name' => [
          'name' => 'file_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('File Name'),
          'description' => E::ts('File name'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.file_name',
          'default' => NULL,
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'file_full' => [
          'name' => 'file_full',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('File Full Path'),
          'description' => E::ts('Full path to file'),
          'maxlength' => 512,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.file_full',
          'default' => NULL,
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'rejection' => [
          'name' => 'rejection',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Rejection Details'),
          'description' => E::ts('Details if attachment cannot be processed.'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.rejection',
          'default' => NULL,
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'mime_type' => [
          'name' => 'mime_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Mime Type'),
          'maxlength' => 128,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.mime_type',
          'default' => NULL,
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'size' => [
          'name' => 'size',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('File Size'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.size',
          'default' => NULL,
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'ext' => [
          'name' => 'ext',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('File Extension'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_attachments.ext',
          'default' => NULL,
          'table_name' => 'nyss_inbox_attachments',
          'entity' => 'InboxAttachments',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxAttachments',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'ox_attachments', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'ox_attachments', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
