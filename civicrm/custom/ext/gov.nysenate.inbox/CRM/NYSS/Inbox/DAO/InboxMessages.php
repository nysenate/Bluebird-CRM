<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from gov.nysenate.inbox/xml/schema/CRM/NYSS/Inbox/InboxMessages.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:0665f686607a283072b551141119be4e)
 */
use CRM_NYSS_Inbox_ExtensionUtil as E;

/**
 * Database access object for the InboxMessages entity.
 */
class CRM_NYSS_Inbox_DAO_InboxMessages extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'nyss_inbox_messages';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique InboxMessages ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Email message ID
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $message_id;

  /**
   * IMAP message ID
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $imap_id;

  /**
   * Email from name
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $sender_name;

  /**
   * Email from email
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $sender_email;

  /**
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $subject;

  /**
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $body;

  /**
   * Individual who forwarded the email
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $forwarder;

  /**
   * See constants in BAO
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $status;

  /**
   * See constants in BAO
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $matcher;

  /**
   * plain/html
   *
   * @var string|null
   *   (SQL type: varchar(10))
   *   Note that values will be retrieved from the database as a string.
   */
  public $format;

  /**
   * Additional details useful for debugging.
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $debug;

  /**
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $updated_date;

  /**
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $email_date;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'nyss_inbox_messages';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Inbox Messageses') : E::ts('Inbox Messages');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'matcher', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique InboxMessages ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.id',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'message_id' => [
          'name' => 'message_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Message ID'),
          'description' => E::ts('Email message ID'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.message_id',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
        'imap_id' => [
          'name' => 'imap_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Imap ID'),
          'description' => E::ts('IMAP message ID'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.imap_id',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
        'sender_name' => [
          'name' => 'sender_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Sender Name'),
          'description' => E::ts('Email from name'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.sender_name',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'sender_email' => [
          'name' => 'sender_email',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Sender Email'),
          'description' => E::ts('Email from email'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.sender_email',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'subject' => [
          'name' => 'subject',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Subject'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.subject',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'body' => [
          'name' => 'body',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Email Body'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.body',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => NULL,
        ],
        'forwarder' => [
          'name' => 'forwarder',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Forwarder Email'),
          'description' => E::ts('Individual who forwarded the email'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.forwarder',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'status' => [
          'name' => 'status',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Processing Status'),
          'description' => E::ts('See constants in BAO'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.status',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_NYSS_Inbox_BAO_InboxMessages::statusOptions',
          ],
          'add' => NULL,
        ],
        'matcher' => [
          'name' => 'matcher',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Contact ID of individual who matched the email'),
          'description' => E::ts('See constants in BAO'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.matcher',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
        'format' => [
          'name' => 'format',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Email Format'),
          'description' => E::ts('plain/html'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.format',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'debug' => [
          'name' => 'debug',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Debugging Details'),
          'description' => E::ts('Additional details useful for debugging.'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.debug',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'updated_date' => [
          'name' => 'updated_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Updated Date'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.updated_date',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
          ],
          'add' => NULL,
        ],
        'email_date' => [
          'name' => 'email_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Email Date'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'nyss_inbox_messages.email_date',
          'table_name' => 'nyss_inbox_messages',
          'entity' => 'InboxMessages',
          'bao' => 'CRM_NYSS_Inbox_DAO_InboxMessages',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'ox_messages', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'ox_messages', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'idx_sender_email' => [
        'name' => 'idx_sender_email',
        'field' => [
          0 => 'sender_email',
        ],
        'localizable' => FALSE,
        'sig' => 'nyss_inbox_messages::0::sender_email',
      ],
      'idx_status' => [
        'name' => 'idx_status',
        'field' => [
          0 => 'status',
        ],
        'localizable' => FALSE,
        'sig' => 'nyss_inbox_messages::0::status',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
