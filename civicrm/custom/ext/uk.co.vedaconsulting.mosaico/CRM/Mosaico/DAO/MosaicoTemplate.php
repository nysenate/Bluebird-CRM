<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from uk.co.vedaconsulting.mosaico/xml/schema/CRM/Mosaico/MosaicoTemplate.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:16450473094763338ba3f855ec5804e0)
 */
use CRM_Mosaico_ExtensionUtil as E;

/**
 * Database access object for the MosaicoTemplate entity.
 */
class CRM_Mosaico_DAO_MosaicoTemplate extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_mosaico_template';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Template ID
   *
   * @var int
   */
  public $id;

  /**
   * Title
   *
   * @var string
   */
  public $title;

  /**
   * Name of the Mosaico base template (e.g. versafix-1)
   *
   * @var string
   */
  public $base;

  /**
   * Fully renderd HTML
   *
   * @var longtext
   */
  public $html;

  /**
   * Mosaico metadata (JSON)
   *
   * @var longtext
   */
  public $metadata;

  /**
   * Mosaico content (JSON)
   *
   * @var longtext
   */
  public $content;

  /**
   * FK to civicrm_msg_template.
   *
   * @var int
   */
  public $msg_tpl_id;

  /**
   * ID of the category this mailing template is currently belongs. Foreign key to civicrm_option_value.
   *
   * @var int
   */
  public $category_id;

  /**
   * Domain ID this message template belongs to.
   *
   * @var int
   */
  public $domain_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_mosaico_template';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Mosaico Templates') : E::ts('Mosaico Template');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'msg_tpl_id', 'civicrm_msg_template', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'domain_id', 'civicrm_domain', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Template ID'),
          'required' => TRUE,
          'where' => 'civicrm_mosaico_template.id',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'title' => [
          'name' => 'title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Title'),
          'description' => E::ts('Title'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_mosaico_template.title',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'base' => [
          'name' => 'base',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Base Template'),
          'description' => E::ts('Name of the Mosaico base template (e.g. versafix-1)'),
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_mosaico_template.base',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'html' => [
          'name' => 'html',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('HTML'),
          'description' => E::ts('Fully renderd HTML'),
          'where' => 'civicrm_mosaico_template.html',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'add' => NULL,
        ],
        'metadata' => [
          'name' => 'metadata',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('metadata'),
          'description' => E::ts('Mosaico metadata (JSON)'),
          'where' => 'civicrm_mosaico_template.metadata',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'add' => NULL,
        ],
        'content' => [
          'name' => 'content',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Content'),
          'description' => E::ts('Mosaico content (JSON)'),
          'where' => 'civicrm_mosaico_template.content',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'add' => NULL,
        ],
        'msg_tpl_id' => [
          'name' => 'msg_tpl_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('message template ID'),
          'description' => E::ts('FK to civicrm_msg_template.'),
          'required' => FALSE,
          'where' => 'civicrm_mosaico_template.msg_tpl_id',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'FKClassName' => 'CRM_Core_DAO_MessageTemplate',
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'table' => 'civicrm_msg_template',
            'keyColumn' => 'id',
            'labelColumn' => 'msg_title',
          ],
          'add' => NULL,
        ],
        'category_id' => [
          'name' => 'category_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Category ID'),
          'description' => E::ts('ID of the category this mailing template is currently belongs. Foreign key to civicrm_option_value.'),
          'required' => FALSE,
          'where' => 'civicrm_mosaico_template.category_id',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Category"),
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'mailing_template_category',
            'optionEditPath' => 'civicrm/admin/options/mailing_template_category',
          ],
          'add' => NULL,
        ],
        'domain_id' => [
          'name' => 'domain_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Domain ID'),
          'description' => ts('Domain ID this message template belongs to.'),
          'required' => FALSE,
          'where' => 'civicrm_mosaico_template.domain_id',
          'table_name' => 'civicrm_mosaico_template',
          'entity' => 'MosaicoTemplate',
          'bao' => 'CRM_Mosaico_DAO_MosaicoTemplate',
          'localizable' => 0,
          'FKClassName' => 'CRM_Core_DAO_Domain',
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'table' => 'civicrm_domain',
            'keyColumn' => 'id',
            'labelColumn' => 'name',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'mosaico_template', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'mosaico_template', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
