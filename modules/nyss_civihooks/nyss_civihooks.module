<?php

function nyss_civihooks_menu()
{
  $items = [];
  $items['nyss_getfile'] = [
    'title' => t('NYSS Retrieve file'),
    'page callback' => 'nyss_civihooks_getfile',
    'access arguments' => ['export print production files'],
    'type' => MENU_SUGGESTED_ITEM,
  ];
  return $items;
} // nyss_civihooks_menu()


function nyss_civihooks_menu_alter(&$items) {
  //5253
  $items['admin/user/user/create']['access arguments'] = ['create users'];

  //7264 remove view tab
  $items['user/%']['type'] = MENU_CALLBACK;
} // nyss_civihooks_menu_alter()


function nyss_civihooks_form_alter(&$form, &$form_state, $form_id) {
  //watchdog('bluebird', 'form_id: <pre>'.print_r($form_id, TRUE).'</pre>');
  //watchdog('bluebird', 'form: <pre>'.print_r($form, TRUE).'</pre>');

  //6062/11725
  if ($form_id == 'user_profile_form') {
    $form['actions']['cancel']['#value'] = 'Delete User Account';
    $form['account']['name']['#description'] = '';
    $form['account']['mail']['#description'] = '';
    $form['account']['name']['#disabled'] = 1;
    unset($form['account']['pass']);

    //inject js because the role modifications below don't work for non-super-admins
    $form['#attached']['js'] = [
      drupal_get_path('module', 'nyss_civihooks') . '/js/user_profile_form.js',
    ];

    //roles
    $form['account']['roles']['#title'] = 'Assignable Roles';
    unset($form['account']['roles'][2]);

    $form['account']['roles'][9]['#prefix'] = '
      <div class="nyss-roles-section-header">Main Role</div>
      <div class="nyss-roles-description">In order for a staff member to get started in Bluebird, they must first have ONE main role assigned to them.</div>
    ';
    $form['account']['roles'][16]['#prefix'] = '
      <div class="nyss-roles-section-header">Add-on Roles</div>
      <div class="nyss-roles-description">Additional roles to extend access in specific feature areas.</div>
      <div class="nyss-roles-subsection-header">Bluebird Mass Email</div>
    ';
    $form['account']['roles'][19]['#prefix'] = '
      <div class="nyss-roles-subsection-header">Bluebird Inbound Email</div>
    ';
    $form['account']['roles'][8]['#prefix'] = '
      <div class="nyss-roles-section-header">Other Senate Office Roles</div>
      <div class="nyss-roles-description">Several Senate central staff offices have permission to access your Senator\'s Bluebird database. The roles below are used specifically for those offices.</div>
    ';
    $form['account']['roles'][4]['#prefix'] = '
      <div class="nyss-roles-section-header">Administrator Roles</div>
    ';
  }

  if ($form_id == 'user_cancel_confirm_form') {
    unset($form['user_cancel_method']['user_cancel_block']);
    unset($form['user_cancel_method']['user_cancel_block_unpublish']);
    unset($form['user_cancel_method']['user_cancel_reassign']);
    $form['user_cancel_method']['user_cancel_delete']['#default_value'] = 'user_cancel_delete';
    $form['user_cancel_method']['user_cancel_delete']['#title'] = 'Delete the user account.';
    $form['user_cancel_method']['#title'] = '';

    unset($form['user_cancel_confirm']);
    $form['description']['#markup'] = 'Please confirm you wish to delete this account.';
    $form['actions']['submit']['#value'] = 'Delete User Account';

    $username = $form['_account']['#value']->name;
    $title = "Are you sure you want to delete the account: {$username}?";
    drupal_set_title($title);
  }

  //6055
  if ($form_id == 'user_admin_account') {
    unset($form['options']['operation']['#options']['cancel']);
  }

  //6740 make sure destination redirect includes query params
  if ($form_id == 'user_login_block') {
    $urlBase = drupal_get_destination();
    $urlQueryParams = drupal_get_query_parameters();
    unset($urlQueryParams['destination']);
    $urlQuery = drupal_http_build_query($urlQueryParams);
    $urlBase['destination'] = $urlBase['destination'].'?'.$urlQuery;
    $form['#action'] = url(current_path(), array('query' => $urlBase, 'external' => false));
  }

  //watchdog('bluebird', 'form (after hook): <pre>'.print_r($form, TRUE).'</pre>');
} // nyss_civihooks_form_alter()


function nyss_civihooks_page_alter(&$page)
{
  //dpm($page);
  $curPage = current_path();
  if ($curPage == 'admin/people') {
    $title = "Manage Users";
    drupal_set_title($title);

    //6709 only show permission filter if admin
    global $user;
    if (!in_array('Administrator', $user->roles) && !in_array('Superuser', $user->roles)) {
      unset($page['content']['system_main']['user_filter_form']['filters']['status']['filters']['permission']);
    }
  }
  elseif (strpos($curPage, 'user/') !== false) {
    $title = "Edit User";
    drupal_set_title($title);
  }
} // nyss_civihooks_page_alter()


function nyss_civihooks_permission() {
  return [
    'export print production files' => [
      'title' => t('Bluebird: Export Print Production Files'),
    ],
    'delete contacts permanently' => [
      'title' => t('Bluebird: Permanently Delete Contacts'),
    ],
    'administer district' => [
      'title' => t('Bluebird: Access District Admin Tasks'),
    ],
    'import print production' => [
      'title' => t('Bluebird: Access Print Production Import Tool'),
    ],
    'administer inbox polling' => [
      'title' => t('Bluebird: Access Inbox Polling'),
    ],
  ];
}


function nyss_civihooks_getfile()
{
  civicrm_initialize();
  require_once 'CRM/Core/Config.php';
  $config =& CRM_Core_Config::singleton();

  $file = $_REQUEST['file'];
  $fullpath = $config->uploadDir.'printProduction/'.$file;

  if (!file_exists($fullpath) || !$file) {
    echo "No file provided. Make sure you have entered the full URL.<br />";
    exit();
  }

  $headers = array(
    "Pragma: public",
    "Expires: 0",
    "Cache-Control: no-cache,must-revalidate, post-check=0, pre-check=0",
    "Cache-Control: public",
    "Content-Description: File Transfer",
    "Content-Type: application/csv",
    "Content-Disposition: attachment; filename=".basename($fullpath),
    "Expires: Mon, 26 Jul 1997 05:00:00 GMT",
    'Content-Length: '.filesize($fullpath)
  );

  //don't use this, seems to cause problems...
  //file_transfer($fullpath, $headers);

  //spit out the header
  foreach ($headers as $header) {
    header($header);
  }

  $fh = fopen($fullpath, "r");

  if (!$fh) {
    echo "no file provided. file requested is: $fullpath";
    exit;
  }

  while (!feof($fh)) {
    echo fread($fh, 1024);
    ob_flush();
  }
  fclose($fh);
} // nyss_civihooks_getfile()


function nyss_civihooks_civicrm_config(&$config)
{
  $session = CRM_Core_Session::singleton();

  //NYSS JobID handling
  $jobID = $session->get('jobID');
  if ($jobID) {
    CRM_Core_DAO::executeQuery('SET @jobID = %1',
      array(1 => array($jobID, 'String'))
    );
  }
} // nyss_civihooks_civicrm_config()


function nyss_civihooks_civicrm_buildForm($formName, &$form) {
  /*Civi::log()->debug('buildForm', array(
    '$formName' => $formName,
    '$form' => $form,
  ));*/

  _fixTitles();

  //Limit import file size to 1MB
  if ($formName =='CRM_Import_Form_DataSource') {
    $uploadFileSize = 1048576;
    $uploadSize = round(($uploadFileSize / (1024*1024)), 2);
    $form->assign('uploadSize', $uploadSize);
    $form->add('file', 'uploadFile', ts('Import Data File'), 'size=30 maxlength=60', true);

    $form->setMaxFileSize($uploadFileSize);
    $form->addRule('uploadFile', ts('File size should be less than %1 MBytes (%2 bytes)', array(1 => $uploadSize, 2 => $uploadFileSize)), 'maxfilesize', $uploadFileSize);
    $form->addRule('uploadFile', ts('Input file must be in CSV format'), 'utf8File');
    $form->addRule('uploadFile', ts('A valid file must be uploaded.'), 'uploadedfile');
    $form->_rules['uploadFile'][1]['message'] = 'File size should be less than 1 MBytes (1048576 bytes)';
  }

  //set NY as default for state field in proximity search
  if ($formName == 'CRM_Contact_Form_Search_Custom' &&
      $form->getVar('_customSearchClass') == 'CRM_Contact_Form_Search_Custom_Proximity') {
    $defaults['state_province_id'] = 1031;
    $form->setDefaults($defaults);
  }

  //5154
  if ($formName == 'CRM_Contact_Form_Search_Custom') {
    $bC = drupal_get_breadcrumb();
    foreach ($bC as $k => $v) {
      if (strpos($v, 'Custom Searches') !== false) {
        unset($bC[$k]);
      }
    }
    drupal_set_breadcrumb($bC);
  }

  //set bounce reason default on, bounce report
  if ($formName == 'CRM_Report_Form_Mailing_Bounce') {
    $defaults['fields[bounce_reason]'] = 1;
    $form->setDefaults($defaults);
  }

  //3674 add limit submit js to all submit buttons
  _nyss_preventDoubleSubmit($formName, $form);

  //add js popup msg to report pdf button
  if ($form->getVar('_instanceForm') && $pdfVar = $form->getVar('_pdfButtonName')) {
    //if the user has selected more than 6 fields for display, warn and proceed
    $form->removeElement($pdfVar);
    $pdfButton =& $form->getElement($pdfVar);

    $jsold = $pdfButton->_attributes['onclick'];
    $jsnew = "var flag = false; $('form').submit(function(e){
      count = $(':input:checkbox:checked[name*=fields]', this);
      if (count.length > 6 && flag == false) {alert('The number of field columns you have selected may exceed what will display in the generated PDF file. Consider selecting fewer fields.'); flag = true;}
    });";
    $pdfButton->setAttribute("onclick", $jsnew.$jsold);

    //3901 if use selects bar or pie chart, hide pdf and print buttons
    $submitVals = $form->_submitValues;
    $paramsVals = $form->getVar('_params');
    $printVar   = $form->getVar('_printButtonName');
    if ((isset($submitVals['charts']) &&
        ($submitVals['charts'] == 'pieChart' || $submitVals['charts'] == 'barChart')) ||
       (isset($paramsVals['charts']) &&
        ($paramsVals['charts'] == 'pieChart' || $paramsVals['charts'] == 'barChart'))) {
      $form->removeElement($pdfVar);
      $form->removeElement($printVar);
      $form->removeElement($printVar); //intentionally duplicated
    }
  }

  //2539 require content in activity email
  if ($formName == 'CRM_Contact_Form_Task_Email') {
    if (empty($form->_submitValues['html_message']) && empty($form->_submitValues['text_message'])) {
      $form->addRule('html_message', ts('Please enter content in either the html or text message fields.'), 'required');
    }
  }

  //4203 disallow setting report nav to root and home parent navigation items
  if ($form->getVar('_instanceForm') && $form->elementExists('parent_id')) {
    $removeList = array(
      '-- select --',
      'Home',
      'Administer',
    );
    $navParent =& $form->getElement('parent_id');
    foreach ($navParent->_options as $key=>$option) {
      if (in_array($option['text'], $removeList)) {
        unset($navParent->_options[$key]);
      }
    }

    //3439 lock permission field
    $permission =& $form->getElement('permission');
    $permission->_values = array(0 => 'access CiviReport');
    $permission->freeze();
  }

  //4339
  if ($formName == 'CRM_Export_Form_Select' && !$form->getVar('_title')) {
    CRM_Utils_System::setTitle(ts('Export All or Selected Fields'));
  }

  //4808 remove various CiviCRM references in page title, etc.
  if (drupal_get_title() == 'CiviCRM') {
    CRM_Utils_System::setTitle(ts('Bluebird'));
  }

  //4921
  if ($formName == 'CRM_Activity_Form_Activity') {
    //resort activity type
    if (!$form->elementExists('activity_type_id')) {
      return;
    }
    $ele =& $form->getElement('activity_type_id');
    $fele =& $form->getElement('followup_activity_type_id');
    $aTypes = $eleOptions = $feleOptions = array();

    foreach ($ele->_options as $k => $aT) {
      $aTypes[$k] = $aT['text'];
    }
    asort($aTypes);
    foreach ($aTypes as $k => $aT) {
      $eleOptions[$k] = array(
        'text' => $ele->_options[$k]['text'],
        'attr' => $ele->_options[$k]['attr'],
      );
      $feleOptions[$k] = array(
        'text' => $fele->_options[$k]['text'],
        'attr' => $fele->_options[$k]['attr'],
      );
    }
    $ele->_options  = $eleOptions;
    $fele->_options = $feleOptions;
  }

  //5399
  if ($formName == 'CRM_Note_Form_Note' && $form->_action != CRM_Core_Action::DELETE) {
    $form->addRule('subject', ts('Please include subject text.'), 'required');
  }

  //6655 add to group perms
  if ($formName == 'CRM_Contact_Form_Task_AddToGroup') {
    if (!CRM_Core_Permission::check('edit groups')) {
      $go =& $form->getElement('group_option');
      unset($go->_elements[1]);

      $form->removeElement('title');
    }
  }

  //5444
  if ($form->getVar('_instanceForm')) {
    $instVals = $form->getVar('_instanceValues');
    if ($instVals['report_id'] == 'logging/contact/detail') {
      $instAttrib = $form->getVar('_attributes');
      $instPath = trim(CRM_Utils_Array::value('action', $instAttrib), '/');
      $printerFriendly = CRM_Utils_System::makeURL('snippet', true, false, $instPath).'2';
      $form->assign('printerFriendly', $printerFriendly);
    }
  }

  //4999
  if ($formName == 'CRM_Contact_Form_Task_PickProfile') {
    foreach ($form->_elements[2]->_options as $k => $opt) {
      if ($k != 0 && strpos($opt['text'], 'Batch') === false) {
        unset($form->_elements[2]->_options[$k]);
      }
    }
  }

  if ($formName == 'CRM_Case_Form_ActivityView') {
    CRM_Core_Resources::singleton()->addScript("
      cj('tr.crm-case-activity-view-Client td.label').text('Constituent');
    ");
  }

  _setDBVars();

  if ($formName == 'CRM_Group_Form_Search') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/groupsSearch.js');
  }

  if ($formName == 'CRM_Group_Form_Edit') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/groupsEdit.js');
  }

  if ($formName == 'CRM_Contact_Form_Search_Builder') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/searchBuilder.js');
  }

  //CRM_Core_Error::debug($formName);
  //CRM_Core_Error::debug($form);
} // nyss_civihooks_civicrm_buildForm()


function nyss_civihooks_civicrm_searchTasks($objectType, &$tasks)
{
  //CRM_Core_Error::debug_var('$objectType', $objectType);
  //CRM_Core_Error::debug_var('$tasks', $tasks);

  if ($objectType == 'contact') {
    unset($tasks[19]); //remove pdf letter creation task, #2284
    //unset($tasks[20]); //remove mass email task, #5498
    unset($tasks[7]); //remove send SMS task, #5665
  }

  //7891
  if ($objectType == 'activity') {
    $tasks[100] = array(
      'title' => 'Update Activity Status',
      'class' => 'CRM_Activity_Form_Task_UpdateStatus',
      'result' => '',
    );
    $tasks[101] = array(
      'title' => 'Tag Activities (assign keywords)',
      'class' => 'CRM_Activity_Form_Task_AddToTag',
      'result' => '',
    );
  }
} // nyss_civihooks_civicrm_searchTasks()

function nyss_civihooks_civicrm_searchColumns($objectName, &$headers, &$rows, &$selector) {
  /*Civi::log()->debug('', [
    '$objectName' => $objectName,
    '$headers' => $headers,
    //'$rows' => $rows,
    '$selector' => $selector,
  ]);*/

  //12644 remove sort cols on search builder
  if (_accessProtected(_accessProtected($selector, '_object'), '_searchContext') == 'builder') {
    foreach ($headers as &$header) {
      if (!empty($header['sort']) && $header['sort'] != 'sort_name') {
        unset($header['sort']);
      }
    }
  }
}

function nyss_civihooks_civicrm_pre($op, $objectName, $objectId, &$objectRef)
{
  //CRM_Core_Error::debug_var('op',$op);
  //CRM_Core_Error::debug_var('objectName',$objectName);
  //CRM_Core_Error::debug_var('objectId',$objectId);
  //CRM_Core_Error::debug_var('objectRef',$objectRef);
  //CRM_Core_Error::backtrace('backTrace', true);

  //NYSS #2729 strip line break
  if (in_array($op, ['edit','create'], true) &&
    in_array($objectName, ['Individual','Organization','Household'], true) &&
    !empty($objectRef['email'])
  ) {
    foreach ($objectRef['email'] as $key => $block) {
      if ($block['signature_html'] == '<br />') {
        $objectRef['email'][$key]['signature_html'] = null;
      }
    }
  }

  //4627 allow blank email overrides
  if ($op == 'edit' && $objectName == 'Profile'
      && isset($objectRef['uf_group_id']) && $objectRef['uf_group_id'] == 8) {
    $objectRef['updateBlankLocInfo'] = true;
  }

  //only create a new address if we have key fields
  //8005 - modified CRM_Core_BAO_Address::dataExists so the below is not really necessary.
  //leaving in place as it would be better if we could handle here...
  if ($op == 'create' && $objectName == 'Address') {
    $skipFields = array('location_type_id', 'is_primary', 'state_province_id', 'country_id', 'contact_id');
    $skipRecord = true;
    foreach ($objectRef as $f => $v) {
      if (!in_array($f, $skipFields) && !empty($v) && $v != 'null') {
        $skipRecord = false;
      }
    }
    if ($skipRecord) {
      foreach ($objectRef as $f => $v) {
        $objectRef[$f] = '';
      }
    }
  }

  //7499/7639 trim space before save
  if (($op == 'edit' || $op == 'create') && $objectName != 'UFMatch') {
    foreach ($objectRef as  $f => $v) {
      if (is_string($v)) {
        if (is_array($objectRef)) {
          $objectRef[$f] = trim($v, ' ');
        }
        elseif (is_object($objectRef)) {
          $objectRef->$f = trim($v, ' ');
        }
      }
    }
    //CRM_Core_Error::debug_var('objectRef after',$objectRef);
  }

  _setDBVars();
} // nyss_civihooks_civicrm_pre()


function nyss_civihooks_civicrm_pageRun(&$page) {
  //CRM_Core_Error::debug_var('pageRun', $page);
  $pagename = $page->getVar('_name');

  _fixTitles();

  //4567 make admin breadcrumb unclickable if lacking permission
  if ($pagename == 'CRM_Admin_Page_Tag' ||
    $pagename == 'CRM_Admin_Page_Mapping' ||
    $pagename == 'CRM_Report_Page_TemplateList'
  ) {
    if (CRM_Core_Permission::check('administer CiviCRM')) {
      return;
    }

    $breadCrumb = drupal_get_breadcrumb();
    foreach ($breadCrumb as $key => $crumb) {
      if ($crumb == '<a href="/civicrm/admin?reset=1">Administer Bluebird</a>') {
        $breadCrumb[$key] = 'Administer Bluebird';
      }
    }
    drupal_set_breadcrumb($breadCrumb);
  }

  //NYSS 5149
  if ($pagename == 'CRM_Dashlet_Page_Activity' ||
      $pagename == 'CRM_Activity_Page_Tab') {
    $activityStatusList = CRM_Core_PseudoConstant::activityStatus();
    $page->assign('activityStatusList', $activityStatusList);
  }

  if ($pagename == 'CRM_Group_Page_Group') {
    CRM_Core_Resources::singleton()->addScriptUrl('/sites/all/modules/nyss_civihooks/js/groupsList.js');
  }

  _setDBVars();
} // nyss_civihooks_civicrm_pageRun()


function nyss_civihooks_civicrm_validateForm($formName, &$fields, &$files, &$form, &$errors) {
  //CRM_Core_Error::debug_var('$formName', $formName);
  //CRM_Core_Error::debug_var('fields', $fields);

  //4272 ensure that target/with contact is set when activity created from contact record
  if ($formName == 'CRM_Activity_Form_Activity' &&
      $form->_context == 'activity' && $form->_action != 8) { //exclude delete
    if (empty($fields['target_contact_id'])) {
      $errors['target_contact_id'] = ts('Please add at least one target contact.');
    }
  }

  if ($formName == 'CRM_Contact_Form_Search_Advanced') {
    $distFlds = array(46, 47, 48, 49, 50, 51, 53, 54, 55);
    foreach ($distFlds as $fld) {
      $form->setElementError("custom_$fld", null);
    }
  }

  if ($formName == 'CRM_Note_Form_Note' &&
    $form->_action != CRM_Core_Action::DELETE
  ) {
    $noteVal = trim($fields['note']);
    if (empty($noteVal)) {
      $errors['note'] = ts('Please enter text in the note field.');
    }

    $subjVal = trim($fields['subject']);
    if (empty($subjVal)) {
      $errors['subject'] = ts('Please enter text in the subject field.');
    }
  }

  if ($formName == 'CRM_Contact_Form_GroupContact') {
    if (empty($fields['group_id'])) {
      //5426 temp fix
      $cid = $form->getVar('_contactId');
      $urlString = 'civicrm/contact/view';
      $urlParams = "action=browse&reset=1&cid={$cid}&selectedChild=group";
      $urlBounce = CRM_Utils_System::url($urlString,$urlParams);

      $errors['group_id'] = 'You must select a group.';
      CRM_Core_Error::statusBounce('You must select a group.', $urlBounce);
    }
  }

  //5725/7653
  if ($formName == 'CRM_Profile_Form_Edit') {
    $contactProfiles = CRM_Core_BAO_UFGroup::getProfiles(array('Individual'));

    switch ($contactProfiles[$fields['gid']]) {
      case 'New Individual':
        $fName = (isset($fields['first_name'])) ? trim($fields['first_name']) : null;
        $lName = (isset($fields['last_name'])) ? trim($fields['last_name']) : null;
        $email = (isset($fields['email-Primary'])) ? trim($fields['email-Primary']) : null;
        if (empty($fName) && empty($lName) && empty($email)) {
          $errors['first_name'] = 'You must enter a first name, last name, or email address, in order to create a contact.';
        }
        break;

      default:
    }
  }

  //CRM_Core_Error::debug_var('$errors', $errors);
} // nyss_civihooks_civicrm_validateForm()


/*
 * @param $messages
 * disable system status check messages
 */
function nyss_civihooks_civicrm_check(&$messages) {
  //Civi::log()->debug('check', array('messages' => $messages));
  foreach ($messages as $k => $msg) {
    unset($messages[$k]);
  }
}//nyss_civihooks_civicrm_check

//10887
function nyss_civihooks_civicrm_alterContent(&$content, $context, $tplName, &$object) {
  if (!CRM_Core_Config::singleton()->debug) {
    $content = _nyss_stripSpaces($content);
  }

  /*Civi::log()->debug('nyss_civihooks_civicrm_alterContent', array(
    '$content' => $content,
    //'$context' => $context,
    //'$tplName' => $tplName,
    //'$object' => $object,
  ));*/
}

function _nyss_stripSpaces($text) {
  return trim(preg_replace('~>\s*\n\s*<~', '><', $text));
}

/**
 * The User ID and Job ID are stored as db variables for inclusion
 * in the log database via the triggers. At times, the variables
 * are lost, causing no value to be stored and in the case of the
 * user ID, preventing the log records from displaying properly
 * (the log record change itself is not impacted). This function can
 * be called to reset those values if they are not currently set.
 */
function _setDBVars() {

  //returning immediately as we've moved this to Core_Config.php; retaining code for now;
  return;

  $session = CRM_Core_Session::singleton();

  if (!CRM_Core_DAO::singleValueQuery('SELECT @civicrm_user_id')) {
    if ($session->get('userID')) {
      CRM_Core_DAO::executeQuery('SET @civicrm_user_id := %1', array(1 => array($session->get('userID'), 'Integer')));
      CRM_Core_Error::debug_log_message("user ID database variable reset to: {$session->get('userID')}");
    }
  }
  if (!CRM_Core_DAO::singleValueQuery('SELECT @jobID')) {
    if ($session->get('jobID')) {
      CRM_Core_DAO::executeQuery('SET @jobID := %1', array(1 => array($session->get('jobID'), 'String')));
      CRM_Core_Error::debug_log_message("jobID database variable reset to: {$session->get('jobID')}");
    }
  }
}

//4808/2960 word replacement for titles
function _fixTitles() {
  $currentTitle = drupal_get_title();
  //CRM_Core_Error::debug_var('currentTitle', $currentTitle);

  $stringReplacement = array(
    'CiviCRM' => 'Bluebird',
    'CiviMail' => 'BluebirdMail',
    'CiviCase' => 'Case',
    'CiviReport' => 'BluebirdReport',
  );

  foreach ($stringReplacement as $search => $replace) {
    if (strpos($currentTitle, $search) !== false) {
      CRM_Utils_System::setTitle(str_replace($search, $replace, $currentTitle));
    }
  }
} // _fixTitles()

/**
 * @param $formName
 * @param $form
 *
 * #3674 - prevent users from submitting forms multiple times
 * see also themes/Bluebird/scripts/civi-header.js
 */
function _nyss_preventDoubleSubmit($formName, &$form) {
  if (isset($form->_elementIndex['buttons']) &&
    strpos($formName, 'Inline') === false
  ) {
    $buttons =& $form->getElement('buttons');

    //list of exclusions by name or value
    $btnExcludeName = array(
      '_qf_Select_next',
      '_qf_Map_next',
      '_qf_PDF_submit',
      '_qf_PDF_cancel',
      '_qf_Contact_upload_view', //handle separately
      '_qf_Contact_upload_new', //handle separately
      '_qf_Contact_upload_cancel', //handle separately
      '_qf_Email_upload', //7393
      '_qf_Relationship_upload', //4414
      '_qf_Search_refresh',
      '_qf_ProofingReport_next',
      '_qf_ProofingReport_submit',
      '_qf_Label_cancel',
      '_qf_Label_submit',
      '_qf_ExportPermissions_next',
      '_qf_ExportPermissions_submit',
      '_qf_ExportPermissions_cancel',
      '_qf_Website_upload', //7800
      '_qf_Demographics_upload', //7800
      '_qf_CustomData_upload', //7800
      '_qf_ProofingReport_next', //11526
      '_qf_ProofingReport_submit', //11526
    );
    $btnExcludeValue = array(
      'PDF',
      'Print Contact List',
      'File on case'
    );
    $btnHandleValid = array(
      '_qf_Contact_upload_view',
      '_qf_Contact_upload_new',
      '_qf_Contact_upload_cancel',
    );

    foreach ($buttons->_elements as $key=>$button) {
      $btnType = $buttons->_elements[$key]->_attributes['type'];
      if ($btnType == 'submit') {
        $btnName = $buttons->_elements[$key]->_attributes['name'];
        $btnValue = $buttons->_elements[$key]->_attributes['value'];
        if (!in_array($btnName, $btnExcludeName) &&
          !in_array($btnValue, $btnExcludeValue)) {
          $js = "if(this.value!='Processing...'){this._nyss_oldvalue=this.value;this.value='Processing...';cj('#' + this.id).click();this.value=this._nyss_oldvalue;return true;}else{return false;}";
          $buttons->_elements[$key]->_attributes['onclick'] = $js;
        }
        elseif (in_array($btnName, $btnHandleValid)) {
          $jsValid = $jsCancel = '';
          if (strpos($btnName, '_cancel') === false) {
            $jsValid = '&& cj("#Contact").valid()';
          }
          $js = 'if(this.value!="Processing..." '.$jsValid.' ){this._nyss_oldvalue=this.value;this.value="Processing...";cj("#" + this.id).click();this.value=this._nyss_oldvalue;return true;}else{return false;}';
          $buttons->_elements[$key]->_attributes['onclick'] = $js;
        }
      }
    }
    //CRM_Core_Error::debug($buttons);
  }
}

/**
 * @param $obj
 * @param $prop
 *
 * @return mixed
 * @throws \ReflectionException
 *
 * 12644
 * helper function to access protected object properties
 */
function _accessProtected($obj, $prop) {
  if (!empty($obj)) {
    $reflection = new ReflectionClass($obj);
    if ($reflection->hasProperty($prop)) {
      $property = $reflection->getProperty($prop);
      $property->setAccessible(TRUE);
      return $property->getValue($obj);
    }
  }

  return NULL;
}
