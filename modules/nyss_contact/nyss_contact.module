<?php

function nyss_contact_civicrm_buildForm($formName, &$form) {
  //CRM_Core_Error::backtrace('buildForm', TRUE);
  //CRM_Core_Error::debug_var('form',$form);
  //CRM_Core_Error::debug_var('$formName',$formName);

  //NYSS 11383 sort activity types
  if (in_array($formName, array(
    'CRM_Activity_Form_Search',
    'CRM_Contact_Form_Search_Advanced',
    'CRM_Activity_Form_Activity',
  ))) {
    if ($form->elementExists('activity_type_id')) {
      $activityTypeFld =& $form->getElement('activity_type_id');
      uasort($activityTypeFld->_options, ['CRM_NYSS_Utils_Sort', 'cmpText']);
      //CRM_Core_Error::debug_var('buildForm $activityTypeFld', $activityTypeFld);
    }
  }

  //NYSS 11385
  if (in_array($formName, array('CRM_Activity_Form_ActivityFilter', 'CRM_Dashlet_Page_AllActivities'))) {
    $form->setDefaults(array(
      'status_id' => array(),
    ));
  }

  //11443
  if ($formName == 'CRM_Activity_Form_Search') {
    if ($form->elementExists('activity_test')) {
      CRM_Core_Resources::singleton()->addScript("
        CRM.$(function($) {
          $('input[name=activity_test]').parent('td').text('');
        });
      ");
    }
  }

  //11464
  if ($formName == 'CRM_Activity_Form_Activity') {
    $max_target_msg = $form->get_template_vars('max_target_msg');
    if ($max_target_msg) {
      CRM_Core_Resources::singleton()->addScript("
        $('tr.crm-activity-form-block-target_contact_id td.label').append('<br /><span style=\'font-size:90%; font-style: italic;\'><strong>Note: </strong>You will not be able to edit the target (with) contact list as there are more than 250 contacts already attached to this activity.</span>');
      ");
    }
  }
}//buildForm

function nyss_contact_civicrm_pageRun(&$page) {
  //CRM_Core_Error::debug_var('pageRun $page', $page);

  $pagename = $page->getVar('_name');
  //CRM_Core_Error::debug_var('pageRun $pagename', $pagename);

  //5412
  if ($pagename == 'CRM_Contact_Page_Inline_Address') {
    $smarty = CRM_Core_Smarty::singleton();
    if ($smarty->get_template_vars('privacy') === NULL) {
      $cid = $smarty->get_template_vars('contactId');
      $contact = civicrm_api('contact', 'getsingle', array('version' => 3, 'id' => $cid));
      //CRM_Core_Error::debug_var('contact', $contact);

      $privacy = array();
      foreach ($contact as $f => $v) {
        if (strpos($f, 'do_not_') !== FALSE || $f == 'is_opt_out') {
          $privacy[$f] = $v;
        }
      }
      //CRM_Core_Error::debug_var('$privacy', $privacy);
      $page->assign('privacy', $privacy);
    }
  }

  //8547
  if ($pagename == 'CRM_Contact_Page_View_CustomData'
    && $page->_groupId == 9
  ) {
    $cid = $page->_contactId;
    $webId = CRM_NYSS_BAO_Integration_Website::getWebId($cid);
    //CRM_Core_Error::debug_var('pageRun $webId', $webId);

    if ($webId) {
      $bbcfg = get_bluebird_instance_config();
      if (isset($bbcfg['website.url'])) {
        $baseUrl = $bbcfg['website.url'];
      }
      else {
        $baseUrl = 'http://nysenate.gov';
      }
      $webUserUrl = "$baseUrl/user/$webId";
      $page->assign('webUserURL', $webUserUrl);
    }
  }

  //11059
  if ($pagename == 'CRM_Activity_Page_Tab') {
    CRM_Core_Region::instance('page-body')->add(array(
      'style' => "
        table.contact-activity-selector-activity {
          /*table-layout: fixed;*/
        }
        table.contact-activity-selector-activity td span > a.action-item,
        table.contact-activity-selector-activity span.btn-slide{
          float: left;
        }
        .crm-container .paging_full_numbers {
          width: 400px !important;
        }
      ",
    ));
  }

  //NYSS 11383 sort activity types
  if (in_array($pagename, array(
    'CRM_Contact_Page_View_Summary',
    'CRM_Activity_Page_Tab',
  ))) {
    $activityTypes = $page->get_template_vars('activityTypes');
    uasort($activityTypes, array('CRM_NYSS_Utils_Sort', 'cmpLabel'));
    $page->assign('activityTypes', $activityTypes);
  }

  //NYSS 11335 truncate long file names (attachments panel)
  if (in_array($pagename, array(
    'CRM_Contact_Page_View_Summary',
    'CRM_Contact_Page_Inline_CustomData',
  ))) {
    $viewCustomData = $page->get_template_vars('viewCustomData');
    $viewCustomDataInline = $page->get_template_vars('cd_edit');
    //Civi::log()->debug('', array('viewCustomData' => $viewCustomData));

    $modified = FALSE;
    foreach ($viewCustomData as &$set) {
      foreach ($set as &$details) {
        //Civi::log()->debug('', array('$details' => $details));
        if ($details['name'] == 'Attachments') {
          foreach ($details['fields'] as $key => &$field) {
            $doc = phpQuery::newDocument($field['field_value']);
            $text = $doc->find('a')->text();
            $maxLength = 35;
            if (strlen($text) > $maxLength) {
              $text = substr($text, 0, $maxLength).'...';
              $doc->find('a')->text($text);
              $field['field_value'] = $doc->html();

              if (!empty($viewCustomDataInline)) {
                $viewCustomDataInline['fields'][$key]['field_value'] = $doc->html();
              }

              $modified = TRUE;
            }

            /*Civi::log()->debug('', array(
              //'$doc' => $doc,
              'text' => $text,
              '$field[field_value]' => $field['field_value'],
            ));*/
          }
        }
      }
    }

    if ($modified) {
      $page->assign('viewCustomData', $viewCustomData);
      $page->assign('cd_edit', $viewCustomDataInline);
    }
  }

  //NYSS 11385
  if ($pagename == 'CRM_Dashlet_Page_Activity') {
    CRM_Core_Resources::singleton()->addScript("
      CRM.$(function($) {
        $('li.widget-activity h3.widget-header').text('My Activities');
        $('th.crm-contact-activity-activity_date').html('Activity Date');
      });
    ");
  }
}//pageRun

function nyss_contact_civicrm_postProcess($formName, &$form) {
  /*Civi::log()->debug('', array(
    'formName' => $formName,
    'form' => $form,
  ));*/

  if ($formName == 'CRM_Contact_Form_Inline_Demographics') {
    $vals = $form->_submitValues;

    _setCustomData('CRM_Contact_Form_Inline_Demographics', $vals);

    //6803 set comm pref when deceased
    if (isset($vals['is_deceased']) && $vals['is_deceased']) {
      civicrm_api('contact', 'create', array(
        'version' => 3,
        'id' => $vals['cid'],
        'do_not_email' => 1,
        'do_not_phone' => 1,
        'do_not_mail' => 1,
        'do_not_sms' => 1,
        'do_not_trade' => 1,
        'is_opt_out' => 1,
        'preferred_communication_method' => '',
      ));

      $params = array(
        'version' => 3,
        'contact_id_a' => $vals['cid'],
        'is_active' => 1,
      );
      $rels = civicrm_api('relationship', 'get', $params);

      foreach ($rels['values'] as $rel) {
        if (($rel['relationship_type_id'] == 6 ||
            $rel['relationship_type_id'] == 7) &&
          (!isset($rel['start_date']) ||
            strtotime($rel['start_date']) < strtotime(date('Y-m-d'))) &&
          (!isset($rel['end_date']) ||
            strtotime($rel['end_date']) > strtotime(date('Y-m-d')) ) ) {

          $msg = "<li>You have marked this contact as deceased and it has a household relationship. Be sure to review the household record and update the postal greeting, email greeting, and addressee values as appropriate.</li>";
        }
      }

      //now register the status message. handle here so we can combine in a nice bullet list
      if ($msg) {
        CRM_Core_Session::setStatus("<ul>$msg</ul>", 'Please note', 'alert', array('expires' => 0));
      }
    }
  }

  if (in_array($formName, array(
    'CRM_Contact_Form_Inline_CommunicationPreferences',
    'CRM_Contact_Form_Inline_ContactInfo'
  ))) {
    _setCustomData($formName, $form->_submitValues);
  }

  if ($formName == 'CRM_Contact_Form_Contact') {
    //CRM_Core_Error::debug_var('form',$form);
    if ($form->_contactType == 'Individual') {
      require_once 'api/api.php';

      $values = $form->_finalValues;
      $contactID = $form->_contactId;
      $msg = '';

      //CRM_Core_Error::debug_var('values',$values);

      //determine if the contact has a household relationship
      $params = array(
        'version' => 3,
        'contact_id_a' => $contactID,
        'is_active' => 1,
      );
      $rels = civicrm_api('relationship', 'get', $params);

      //if there are no household relationships, we don't need to continue
      if (!$rels['count']) {
        return;
      }
      //CRM_Core_Error::debug_var('rels',$rels);

      //check if all indivs related to the household are marked either do not email or do not mail
      //if so, mark the household with those values and return a message
      if ($values['privacy']['do_not_email'] || $values['privacy']['do_not_mail']) {
        foreach ($rels['values'] as $rel) {
          if (($rel['relationship_type_id'] == 6 ||
              $rel['relationship_type_id'] == 7) &&
            (!isset($rel['start_date']) ||
              strtotime($rel['start_date']) < strtotime(date('Y-m-d'))) &&
            (!isset($rel['end_date']) ||
              strtotime($rel['end_date']) > strtotime(date('Y-m-d')))) {
            //now determine if there are other contacts attached to this household
            $houseID = $rel['contact_id_b'];

            $params = array(
              'version'      => 3,
              'contact_id_b' => $houseID,
              'is_active'    => 1,
            );
            $hRels = civicrm_api('relationship', 'get', $params);

            if (!$rels['count']) {
              continue;
            }

            $flagDNM = $flagDNE = true; //assume true and break when a contact is not flagged
            foreach ($hRels['values'] as $hRel) {
              //CRM_Core_Error::debug_var('hRel',$hRel);
              if (($hRel['relationship_type_id'] == 6 ||
                  $hRel['relationship_type_id'] == 7) &&
                (!isset($hRel['start_date']) ||
                  strtotime($hRel['start_date']) < strtotime(date('Y-m-d'))) &&
                (!isset($hRel['end_date']) ||
                  strtotime($hRel['end_date']) > strtotime(date('Y-m-d')))) {

                //check if related indiv has DNM or DNE
                $params = array(
                  'version' => 3,
                  'id' => $hRel['contact_id_a'],
                );
                $iContact = civicrm_api('contact', 'getsingle', $params);
                //CRM_Core_Error::debug_var('iContact',$iContact);
                if (!$iContact['do_not_mail']) {
                  $flagDNM = false;
                }
                if (!$iContact['do_not_email']) {
                  $flagDNE = false;
                }
              }
            }

            //now process the household
            if ($flagDNM) {
              $params = array(
                'version' => 3,
                'id' => $houseID,
                'do_not_mail' => 1,
              );
              $dnm = civicrm_api('Contact', 'Update', $params);
              $msg .= '<li>This individual has a related household record which has been marked Do Not Postal Mail. </li>';
            }
            if ($flagDNE) {
              $params = array(
                'version' => 3,
                'id' => $houseID,
                'do_not_email' => 1,
              );
              $dne = civicrm_api('Contact', 'Update', $params);
              $msg .= '<li>This individual has a related household record which has been marked Do Not Email. </li>';
            }
          }
        }
      } //DNM/DNE

      //4744 if marked deceased and a household relationship exists, return message
      $isDeceased = civicrm_api('Contact', 'Getvalue', array('version' => 3, 'id' => $contactID, 'return' => 'is_deceased'));
      if ($isDeceased) {
        foreach ($rels['values'] as $rel) {
          if (($rel['relationship_type_id'] == 6 ||
              $rel['relationship_type_id'] == 7) &&
            (!isset($rel['start_date']) ||
              strtotime($rel['start_date']) < strtotime(date('Y-m-d'))) &&
            (!isset($rel['end_date']) ||
              strtotime($rel['end_date']) > strtotime(date('Y-m-d')) ) ) {

            $msg .= "<li>You have marked this contact as deceased and it has a household relationship. Be sure to review the household record and update the postal greeting, email greeting, and addressee values as appropriate.</li>";
          }
        }
      } //is_deceased

      //now register the status message. handle here so we can combine in a nice bullet list
      if ($msg) {
        CRM_Core_Session::setStatus("<ul>$msg</ul>", 'Please note', 'alert', array('expires' => 0));
      }
    } //Individual
  } //CRM_Contact_Form_Contact
}

function nyss_contact_civicrm_tabset($tabsetName, &$tabs, $context) {
  //CRM_Core_Error::debug_var('$tabset', $tabsetName);
  //CRM_Core_Error::debug_var('$tabs', $tabs);
  //CRM_Core_Error::debug_var('$context', $context);

  if ($tabsetName == 'civicrm/contact/view') {
    //create new tab for website integration; only attach to individuals
    try {
      $ctype = civicrm_api3('contact', 'getvalue', [
        'id' => $context['contact_id'],
        'return' => 'contact_type'
      ]);
      if ($ctype == 'Individual') {
        /*$url_message = CRM_Utils_System::url('civicrm/nyss/web/message',
          "reset=1&snippet=1&force=1&cid={$context['contact_id']}");
        $tabs[] = [
          'id' => 'nyss_web_message',
          'url' => $url_message,
          'title' => 'Website Messages',
          'weight' => 500
        ];*/

        $url_tags = CRM_Utils_System::url('civicrm/nyss/web/tags',
          "reset=1&snippet=1&force=1&cid={$context['contact_id']}");
        $tabs[] = [
          'id' => 'nyss_web_tags',
          'url' => $url_tags,
          'title' => 'Website Tags',
          'weight' => 500
        ];

        $url_activity = CRM_Utils_System::url('civicrm/nyss/web/activitystream',
          "reset=1&snippet=1&force=1&cid={$context['contact_id']}");
        $tabs[] = [
          'id' => 'nyss_web_activitystream',
          'url' => $url_activity,
          'title' => 'Website Activity',
          'weight' => 500
        ];
      }
    }
    catch (CiviCRM_API3_Exception $e) {}
  }
}//tabset

function nyss_contact_civicrm_alterTemplateFile($formName, &$form, $context, &$tplName) {
  //CRM_Core_Error::debug_var('alterTemplateFile $formName', $formName);
  //CRM_Core_Error::debug_var('alterTemplateFile $context', $context);
  //CRM_Core_Error::debug_var('alterTemplateFile $tplName', $tplName);
  //CRM_Core_Error::debug_var('alterTemplateFile $form', $form);

  //website profile tab
  if ($formName == 'CRM_Contact_Page_View_CustomData' &&
    $form->_groupId == 9
  ) {
    $tplName = 'CRM/NYSS/ContactWebsiteProfileTab.tpl';
  }
}//alterTemplateFile

function _setCustomData($formName, $vals) {
  //CRM_Core_Error::debug_var('$vals',$vals);

  //construct map of form and custom field ids
  $formFlds = array(
    'CRM_Contact_Form_Inline_Demographics' => array(
      'custom_63' => 'text',
      'custom_45' => 'text',
      'custom_58' => 'multi',
      'custom_62' => 'text',
    ),
    'CRM_Contact_Form_Inline_CommunicationPreferences' => array(
      'custom_64' => 'text',
    ),
    'CRM_Contact_Form_Inline_ContactInfo' => array(
      'custom_60' => 'select',
      'custom_42' => 'select',
    ),
  );

  foreach ($formFlds[$formName] as $fld => $type) {
    //CRM_Core_Error::debug_var("vals[{$fld}]", $vals[$fld]);

    //if a multi field and not set, set to empty array
    if ($type == 'multi' && !isset($vals[$fld])) {
      $vals[$fld] = array();
    }

    //set custom data
    if (isset($vals[$fld])) {
      civicrm_api('contact', 'create', array(
        'version' => 3,
        'id' => $vals['cid'],
        $fld => $vals[$fld],
      ));
    }
  }
}//_setCustomData

function _getFldOpts($id) {
  $params = array(
    'version' => 3,
    'id' => $id,
  );
  $fld = civicrm_api('custom_field', 'get', $params);
  //CRM_Core_Error::debug_var('$fld', $fld);

  $params = array(
    'version' => 3,
    'option_group_id' => $fld['values'][$id]['option_group_id'],
  );
  $opts = civicrm_api('option_value', 'get', $params);
  //CRM_Core_Error::debug_var('$opts', $opts);

  //if select list, prepend -select-
  if ($fld['values'][$id]['html_type'] == 'Select') {
    $optList = array('' => '- select -');
  }
  else {
    $optList = array();
  }

  foreach ($opts['values'] as $opt) {
    $optList[$opt['value']] = $opt['label'];
  }
  //CRM_Core_Error::debug_var('$optList', $optList);

  return $optList;
}//_getFldOpts
